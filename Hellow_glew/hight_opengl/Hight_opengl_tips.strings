/* 
  Hight_opengl_tips.strings
  Hellow_glew

  Created by JFChen on 2018/4/11.
  Copyright © 2018年 JFChen. All rights reserved.
*/

一、深度测试
1、设置好一个平截头体（设置透视矩阵透视矩阵,比如glm::perspective(glm::radians(camera.Zoom), (float)SCR_WIDTH / (float)SCR_HEIGHT, 0.1f, 100.0f);）。 那么深度值Z对应的应该就是 0.1 ～ 100，对应着z值的0～1。是线形对齐的。也就是说 0.1 对应的是0，100对应的是1.但其实不是的。 深度值很大一部分是由很小的z值所决定的，这给了近处的物体很大的深度精度。这个（从观察者的视角）变换z值的方程是嵌入在投影矩阵中的，所以当我们想将一个顶点坐标从观察空间至裁剪空间的时候这个非线性方程就被应用了。

glDepthFunc(GL_LESS);
这个函数接受下面表格中的比较运算符：

函数    描述
GL_ALWAYS    永远通过深度测试
GL_NEVER    永远不通过深度测试
GL_LESS    在片段深度值小于缓冲的深度值时通过测试
GL_EQUAL    在片段深度值等于缓冲区的深度值时通过测试
GL_LEQUAL    在片段深度值小于等于缓冲区的深度值时通过测试
GL_GREATER    在片段深度值大于缓冲区的深度值时通过测试
GL_NOTEQUAL    在片段深度值不等于缓冲区的深度值时通过测试
GL_GEQUAL    在片段深度值大于等于缓冲区的深度值时通过测试

二、模版测试
一个模板缓冲中，（通常）每个模板值(Stencil Value)是8位的。所以每个像素/片段一共能有256种不同的模板值。我们可以将这些模板值设置为我们想要的值，然后当某一个片段有某一个模板值的时候，我们就可以选择丢弃或是保留这个片段了。

1）
glStencilFunc(GLenum func, GLint ref, GLuint mask)一共包含三个参数：

func：设置模板测试函数(Stencil Test Function)。这个测试函数将会应用到已储存的模板值上和glStencilFunc函数的ref值上。可用的选项有：GL_NEVER、GL_LESS、GL_LEQUAL、GL_GREATER、GL_GEQUAL、GL_EQUAL、GL_NOTEQUAL和GL_ALWAYS。它们的语义和深度缓冲的函数类似。
ref：设置了模板测试的参考值(Reference Value)。模板缓冲的内容将会与这个值进行比较。
mask：设置一个掩码，它将会与参考值和储存的模板值在测试比较它们之前进行与(AND)运算。初始情况下所有位都为1。

例子：
glStencilFunc(GL_EQUAL, 1, 0xFF)
这会告诉OpenGL，只要一个片段的模板值等于(GL_EQUAL)参考值1，片段将会通过测试并被绘制，否则会被丢弃。

2）
glStencilFunc仅仅描述了OpenGL应该对模板缓冲内容做什么，而不是我们应该如何更新缓冲。这就需要glStencilOp这个函数了

glStencilOp(GLenum sfail, GLenum dpfail, GLenum dppass)一共包含三个选项，我们能够设定每个选项应该采取的行为：

sfail：模板测试失败时采取的行为。
dpfail：模板测试通过，但深度测试失败时采取的行为。
dppass：模板测试和深度测试都通过时采取的行为。
每个选项都可以选用以下的其中一种行为：

行为    描述
GL_KEEP    保持当前储存的模板值
GL_ZERO    将模板值设置为0
GL_REPLACE    将模板值设置为glStencilFunc函数设置的ref值
GL_INCR    如果模板值小于最大值则将模板值加1
GL_INCR_WRAP    与GL_INCR一样，但如果模板值超过了最大值则归零
GL_DECR    如果模板值大于最小值则将模板值减1
GL_DECR_WRAP    与GL_DECR一样，但如果模板值小于0则将其设置为最大值
GL_INVERT    按位翻转当前的模板缓冲值

3）
为物体创建轮廓的步骤如下：

在绘制（需要添加轮廓的）物体之前，将模板函数设置为GL_ALWAYS，每当物体的片段被渲染时，将模板缓冲更新为1。
渲染物体。
禁用模板写入以及深度测试。
将每个物体放大一点点。
使用一个不同的片段着色器，输出一个单独的（边框）颜色。
再次绘制物体，但只在它们片段的模板值不等于1时才绘制。
再次启用模板写入和深度测试。
这个过程将每个物体的片段的模板缓冲设置为1，当我们想要绘制边框的时候，我们主要绘制放大版本的物体中模板测试通过的部分，也就是物体的边框的位置。我们主要使用模板缓冲丢弃了放大版本中属于原物体片段的部分。

通过使用模板缓冲，我们可以根据场景中已绘制的其它物体的片段，来决定是否丢弃特定的片段。



